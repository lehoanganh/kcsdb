service1:
  name: cassandra
  attributes:
    backup: true
    replication_factor: 1
    partitioner: RandomPartitioner
    heap_size: dummy
    heap_new_size: dummy
    key_cache_size_in_mb: dummy
    row_cache_size_in_mb: dummy
    key_cache_save_period: dummy
    row_cache_save_period: dummy
service2:
  name: ycsb
  attributes:
    load: 'no' # TRANSACTION phase
    measurementtype: timeseries
    timeseries.granularity: 10000 # 10 s, one status
    heap_size: 8192 # a big enough heap size has to be set in order to generate millions rows
    recordcount: 30000000 # 30 Mio rows for all nodes
    operationcount: 3000000 # 3 000 000 ops for all nodes
    fieldcount: 10 # 10 columns pro row
    fieldlength: 100 # a column is 100 byte
    threadcount: 30
    readallfields: true # all columns of a row will be read
    insertorder: ordered # ordered --> 0,1,2,3 | hashed --> 4123412341234,67754674, 11, .....
    readproportion: 0.99 # 99% read ops
    updateproportion: 0.01 # 1% write ops
    requestdistribution: veryhotspot # zipfian | veryhotspot
    hotspots: 300000 # number of hotspots
    variance: 0.01 # low variance --> All hotspots have equally popularities (entropy ~1) | high variace --> Some hotspots have dominated popularities (entropy ~0)
    alpha: 0.5 # alpha defines how likely a hotspot takes a new cluster, low alpha --> small chance to take a new cluster, big alpha --> big chance to take a new cluster
service3:
  name: gmond
  attributes:
    send_metadata_interval: 60
profile1:
  provider: aws
  snapshot: false  
  regions:
    region1:
      name: us-east-1
      machine_type: dummy
      template: 3 cassandra, 1 ycsb
    #region2:
      #name: us-west-1
      #machine_type: small
      #template: 3 cassandra, 2 ycsb
    # region3:
      # name: us-west-2
      # machine_type: small
      # template: 1 cassandra
    # region4:
      # name: eu-west-1
      # machine_type: small
      # template: 1 cassandra       

    