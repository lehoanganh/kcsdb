# *********************************************************************** #
# @author: LHA hoanganh[dot]le[at]me[dot]com                              #
# Capfile for using Capistrano in KCSD Server                           #
# the KCSD Server uses this Capfile to control the distribution process #
# *********************************************************************** #
current_dir = File.dirname(__FILE__)

load 'deploy' if respond_to?(:namespace) # cap2 differentiator

# manual load murder libraries
load(Dir['chef-repo/.chef/murder-kcsd/lib/murder/admin.rb'][0].to_s)
load(Dir['chef-repo/.chef/murder-kcsd/lib/murder/murder.rb'][0].to_s)
#murder_kcsd = File.expand_path(File.join(current_dir + "/../murder-kcsd/lib/murder"))
#path_to_murder = "#{murder_kcsd}/murder.rb"
#path_to_admin = "#{murder_kcsd}/admin.rb"
#load "#{path_to_murder}"
#load "#{path_to_admin}"
#cassandra7 = File.expand_path(File.join(current_dir + "/cassandra7"))
#cassandra8 = File.expand_path(File.join(current_dir + "/cassandra8"))
#cassandra10 = File.expand_path(File.join(current_dir + "/cassandra10"))

# =============================================== #
# REQUIRED GEMS
# =============================================== #

# ruby gems
require 'rubygems'

# yaml for editing the cassandra.yaml file
require 'yaml'

# fileutils for manipulating files and directories in murder server
require 'fileutils'



# =============================================== #
# HELP VARIABLES
# =============================================== #

# nodes array contains all private IPs of machines (seeder and peers) in the EC2 environment
# Capistrano reads the n_ips.txt file and parses it into the nodes array
nodes = []

path_to_n_ips = "#{current_dir}/n_ips.txt"
path_to_kcsd_ip = "#{current_dir}/kcsdb_private_ip.txt"

# check if the file exists or not
# if yes, read the file and pass it to nodes array
# if no, warning
if (FileTest.exist?(Dir['chef-repo/.chef/capistrano-kcsd/n_ips.txt'][0].to_s))
	File.open(Dir['chef-repo/.chef/capistrano-kcsd/n_ips.txt'][0].to_s) do |f|
		nodes = f.each_line.map{|l| l.chomp}
	end
else
  puts "KCSD Server needs the n_ips.txt to get the private IP addresses of all nodes"
	nodes << "127.0.0.1"
end


# get the private IP of KCSD Server
server = []
if (FileTest.exist?(Dir['chef-repo/.chef/capistrano-kcsd/kcsdb_private_ip.txt'][0].to_s))
	File.open(Dir['chef-repo/.chef/capistrano-kcsd/kcsdb_private_ip.txt'][0].to_s) do |f|
		server = f.each_line.map{|l| l.chomp}
	end
else
  puts "KCSD Server needs the kcsd_ip.txt to get the private IP address of KCSD Server"
	server << "127.0.0.1"
end

# agent path on each Cassandra node
agent_path = "#{ENV['HOME']}/agent"

# Cassandra's folders
cassandra_data = "/var/lib/cassandra"
cassandra_log = "/var/log/cassandra"

# OpsCenter's folder
opscenter_path = "#{ENV['HOME']}/opscenter"



# =============================================== #
# MURDER RELATED VARIABLES
# =============================================== #

# application name
set :application, 'cassandra-distribution'

# all commands are executed in remoted machines as root
set :use_sudo, true 

# the user of the systems that capistrano uses to log in
set :user, 'dummy'

# the private key which capistrano uses to access multiple
ssh_options[:keys] = 'dummy'


# the source files in web
#set :source_files_path, 'http://archive.apache.org/dist/cassandra/0.7.10/apache-cassandra-0.7.10-bin.tar.gz'
#set :source_files_path, 'http://archive.apache.org/dist/cassandra/0.8.10/apache-cassandra-0.8.10-bin.tar.gz'
#set :source_files_path, 'http://archive.apache.org/dist/cassandra/1.0.8/apache-cassandra-1.1.1-bin.tar.gz'
set :source_files_path, 'dummy'

# Cassandra's Version
# now support only 3 versions: 0.7.10, 0.8.10 and 1.0.x
#set :cassandra_version, '0.7.10'
#set :cassandra_version, '0.8.10'
#set :cassandra_version, '1.0.x'
set :cassandra_version, 'dummy'

# temporary directory
set :temp_path, '/tmp'

# the tag specifies which source files will be distributed
set :tag, 'dist_cassandra'

# location for the related murder's files in every machines (seeder and peers)
set :murder_path, "#{ENV['HOME']}/murder"

#location for MURDER in KCSD
#set :kcsd_murder_path, Dir['chef-repo/.chef/MURDER'][0].to_s

# location for the distributed files in all nodes (seeder/tracker/peers)
set :distribution_path, "#{ENV['HOME']}/cassandra"

# murder roles (optional. seeder/tracker will default to the first deployable server) 
# the first machine in nodes array is the seeder/tracker
role :tracker, nodes[0]
role :seeder, nodes[0]

# peer role defaults to all deployable servers (all except :no_release => true)
# all machines are peers
role :peer, *(nodes.map{|n| "#{n}" })

# =============================================== #
# THE TASKS FOR MURDER SERVER
# =============================================== #
namespace :kcsd do
  # ====================================================================================== #
	# Clean up everything from the last distribution in all Nodes and KCSD Server
	# ====================================================================================== #

	desc 'Clean up everything from the last distribution in all Nodes and KCSD Server'
	task :clean_everything, :roles => :peer do

		# the location of the distributed files
		puts ":::::::::::::::::: Deleting the Distribution folder"
		run "rm -rf #{distribution_path}"

		# the location of the temporary files
		puts ":::::::::::::::::: Deleting the Temporary folder"
		run "sudo rm -rf #{temp_path}/*"

		# the location of Cassandra
		puts ":::::::::::::::::: Deleting the Cassandra's folders"
		run "sudo rm -rf #{cassandra_data}"
		run "sudo rm -rf #{cassandra_log}"

		# the location of OpsCenter agent on each node
		puts ":::::::::::::::::: Deleting the Agent folder"
		run "rm -rf #{agent_path}"

		# clean the temporary folder in KCSD Server
		puts ":::::::::::::::::: Deleting the Temporary folder in KCSD Server"
		puts ":::::::::::::::::: Deleting the OpsCenter folder in KCSD Server"
		system "sudo rm -rf #{temp_path}/*"
		system "rm -rf #{opscenter_path}"

	end



	# ====================================================================================== #
	# Configure Cassanda in all Nodes of the Cluster
	# ====================================================================================== #
	
	desc 'Configure Cassanda in all nodes of the cluster'
	task :configure_cassandra, :roles => :peer do

    # Choose a corresponding cassandra.yaml for the selected version
		# Goal: edit corresponding parameters in cassandra.yaml
    if ("#{cassandra_version}"=="0.7.10")
      config = YAML::load(File.open(Dir['chef-repo/.chef/capistrano-kcsd/cassandra7/cassandra.yaml'][0].to_s))
      #config = YAML::load("#{cassandra7}/cassandra.yml")
    elsif ("#{cassandra_version}"=="0.8.10")
      config = YAML::load(File.open(Dir['chef-repo/.chef/capistrano-kcsd/cassandra8/cassandra.yaml'][0].to_s))
      #config = YAML::load("#{cassandra8}/cassandra.yml")
    elsif ("#{cassandra_version}"=="1.0.x")
      config = YAML::load(File.open(Dir['chef-repo/.chef/capistrano-kcsd/cassandra10/cassandra.yaml'][0].to_s))
      #config = YAML::load("#{cassandra10}/cassandra.yml")
    else
      puts "KCSD Server supports only 3 versions (7,8,10)"
      exit(1)
    end

		# edit the cassandra.yaml file
		# SEEDS

		# seeds variable contains the IP addresses of all seeds
		seeds = ""

		# 1/2 of all nodes in the cluster are seeds
		number_of_seeds = (nodes.size()/2)

		# get the IP addresses for seeds from the nodes array
		for i in 0..number_of_seeds-1 do
			seeds << nodes[i]
			seeds << ","
		end

		# delete the last comma
		seeds = seeds[0..-2]

		# the seeds parameter is set 
		if("#{cassandra_version}"=="0.7.10")
			#config["auto_bootstrap"] = "true" # turn on auto bootstrap, the function is only for Cassandra 0.7.10
			config["seeds"][0] = seeds # set the seeds parameter
		end

		if("#{cassandra_version}"=="0.8.10")
			config["seed_provider"][0]["parameters"][0]["seeds"] = seeds # set the seeds parameter
		end

		if("#{cassandra_version}"=="1.0.x")
			config["seed_provider"][0]["parameters"][0]["seeds"] = seeds # set the seeds parameter
		end

		i = 0
    hosts = nodes.size
		nodes.each do |node|
          node.chomp!
					config["cluster_name"] = "KCSDB Cluster"
          config["listen_address"] = node 
          config["rpc_address"] = node
			
					config["initial_token"] = i * ((2 ** 127) / hosts)
          puts "#{node} #{i} #{config['initial_token']}"
         
          File.open("#{temp_path}/#{node}", "w") do |out|
              YAML::dump(config, out)
          end

					i+=1
     end

		# upload the modified cassandra.yaml to each node
		upload("#{temp_path}/$CAPISTRANO:HOST$", "#{distribution_path}/conf/cassandra.yaml")

		# edit cassandra-env.sh
		nodes.each do |node|
          node.chomp!
          
					# edit the cassandra-env.sh and clone to another file
          if ("#{cassandra_version}"=="0.7.10")
            system "cp #{Dir['chef-repo/.chef/capistrano-kcsd/cassandra7/cassandra-env.sh'][0].to_s} #{temp_path}/#{node}"
            #system "cp #{cassandra7}/cassandra-env.sh #{temp_path}/#{node}"
          elsif ("#{cassandra_version}"=="0.8.10")
            system "cp #{Dir['chef-repo/.chef/capistrano-kcsd/cassandra8/cassandra-env.sh'][0].to_s} #{temp_path}/#{node}"
            #system "cp #{cassandra8}/cassandra-env.sh #{temp_path}/#{node}"
          elsif ("#{cassandra_version}"=="1.0.x")
            system "cp #{Dir['chef-repo/.chef/capistrano-kcsd/cassandra10/cassandra-env.sh'][0].to_s} #{temp_path}/#{node}"
            #system "cp #{cassandra10}/cassandra-env.sh #{temp_path}/#{node}"
          else
            puts "KCSDB Server supports only 3 versions (7,8,10)"
            exit(1)
          end

					system "sed -i \"s/<public name>/#{node}/g\" #{temp_path}/#{node}"
    end

		# upload the edited cassandra-env.sh to node
		upload("#{temp_path}/$CAPISTRANO:HOST$", "#{distribution_path}/conf/cassandra-env.sh")

		# Cassandra's directories in all nodes
		run "sudo mkdir -p #{cassandra_data}" # data directory for Cassandra
		run "sudo mkdir -p #{cassandra_log}" # log directory for Cassandra
		run "sudo chown -R $USER #{cassandra_data}" # change the ownership for the Linux user, in order to use the data folder
		run "sudo chown -R $USER #{cassandra_log}" # change the ownership for the Linux user, in order to use the data folder

	end



	# ====================================================================================== #
	# @author: lha
	# Start Cassandra in all nodes
	# Cassandra is installed in each node with a Tarball
	# Therefore start Cassandra as a service is impossible
	# start Cassandra with the script
	# ====================================================================================== #
	desc 'Start Cassandra in all nodes of the cluster'
	task :start_cassandra, :roles => :peer do
		# the process id of cassandra will be saved in pid file
		# that will be used to kill Cassandra process

		
		if("#{cassandra_version}"=="0.8.10")
			# Cassandra 0.8.10 needs the CASSANDRA_HOME variable
#			run "echo \\#\\! /bin/bash >> #{distribution_path}/cassandra_home"			
#			run "echo export CASSANDRA_HOME=#{distribution_path} >> #{distribution_path}/cassandra_home"
#			run "source #{distribution_path}/cassandra_home"

			run "export CASSANDRA_HOME=#{distribution_path}"
		end		
        #run "#{distribution_path}/bin/./cassandra -f" # foreground
		run "#{distribution_path}/bin/./cassandra" # background
	end



	# ====================================================================================== #
	# @author: lha
	# Stop Cassandra in all nodes
	# ====================================================================================== #
	desc 'Stop Cassandra in all nodes of the cluster'
	task :stop_cassandra, :roles => :peer do
		run "pkill -9 -f 'cassandra'"
	end


	
	# ====================================================================================== #
	# @author: lha
	# Install OpsCenter in KCSD Server
	# Install OpsCenter Agents in Cassandra nodes
	# ====================================================================================== #

	# ATTENTION: OpsCenter 1.4.1 support only Cassandra >= 0.8 !!!!!!

	desc 'Install OpsCenter on KCSD Server and Install OpsCenter Agent in Cassandra Nodes'
	task :install_opscenter, :roles => :peer do
		
		# ====================================================================================== #
		# INSTALL OPSCENTER IN MURDER SERVER


		if (FileTest.exist?("#{opscenter_path}"))
			system "rm -rf #{opscenter_path}"		
		end


		#if !(FileTest.exist?("#{ENV['HOME']}/opscenter"))
			# INFO
			puts ":::::::::::::::::: DataStax OpsCenter is not installed!!!"
			puts ":::::::::::::::::: Installing DataStax OpsCenter from tarball"			
			puts ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
			# create the OpsCenter folder
			puts ":::::::::::::::::: Creating the OpsCenter folder"
			system "mkdir #{opscenter_path}"

			# download the tarball of OpsCenter
			puts ":::::::::::::::::: Downloading the tarball from DataStax"
			system "wget http://downloads.datastax.com/community/opscenter.tar.gz -nv -O #{temp_path}/opscenter.tar.gz"

			# untar it into the OpsCenter
			puts ":::::::::::::::::: Untar the downloaded tarball into the OpsCenter folder"
			system "tar -xzf #{temp_path}/opscenter.tar.gz --strip-components=1 -C #{opscenter_path}"
		#end
		
		# ====================================================================================== #
		# CONFIGURE OPSCENTER IN MURDER SERVER
		# INFO
		puts ":::::::::::::::::: Configuring DataStax OpsCenter to monitor the Cassandra Cluster"
		puts ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
		
		# the web server interface is the private IP address for WebServer
		puts ":::::::::::::::::: Setting the private IP Address for OpsCenter WebServer: #{server[0]}"	
		system "sed -i \"s/interface = .*/interface = #{server[0]}/g\" #{opscenter_path}/conf/opscenterd.conf"

		# the seeds in Cassandra cluster
		# exact the same parameter in cassandra.yaml
		seeds = "" # seeds variable contains the IP addresses of all seeds
		number_of_seeds = (nodes.size()/2) # 1/2 of all nodes in the cluster are seeds
		for i in 0..number_of_seeds-1 do # get the IP addresses for seeds from the nodes array
			seeds << nodes[i]
			seeds << ","
		end
		seeds = seeds[0..-2] # delete the last comma
		puts ":::::::::::::::::: Setting the Seeds for Cassandra cluster #{seeds}"		

		system "sed -i \"s/seed_hosts = .*/seed_hosts = #{seeds}/g\" #{opscenter_path}/conf/opscenterd.conf"

		# the Thrift RPC port
		puts ":::::::::::::::::: Setting the Thrift RPC port for Cassandra cluster: 9160"
		system "sed -i \"s/#api_port.*/api_port = 9160/g\" #{opscenter_path}/conf/opscenterd.conf"

		if("#{cassandra_version}"=="0.7.10")
			puts ":::::::::::::::::: Setting the JMX RPC port for Cassandra cluster: 8080"
			system "sed -i \"s/port = 7199/port = 8080/g\" #{opscenter_path}/conf/opscenterd.conf"
		end

		if("#{cassandra_version}"=="0.8.10")
			puts ":::::::::::::::::: Setting the JMX RPC port for Cassandra cluster: 7199"
			system "sed -i \"s/port = 7199/port = 7199/g\" #{opscenter_path}/conf/opscenterd.conf"
		end

		if("#{cassandra_version}"=="1.0.x")
			puts ":::::::::::::::::: Setting the JMX RPC port for Cassandra cluster: 7199"
			system "sed -i \"s/port = 7199/port = 7199/g\" #{opscenter_path}/conf/opscenterd.conf"
		end

		# ====================================================================================== #
		# SETUP OPSCENTER IN MURDER SERVER
		# this process will
		# 1. create the SSL for OpsCenter
		# 2. create agent.tar.gz. This file will be use to install OpsCenter Agent on Cassandra nodes
		puts ":::::::::::::::::: Setting up DataStax OpsCenter for the Cassandra cluster"
		puts ":::::::::::::::::: This process will"
		puts ":::::::::::::::::: 1. create the SSL for OpsCenter"
		puts ":::::::::::::::::: 2. create a agent.tar.gz which will be used to install agents on Cassandra nodes"
		puts ":::::::::::::::::: The process takes a minute. Please wait!!!"			
		system "#{opscenter_path}/bin/./setup.py"

		# ====================================================================================== #
		# INSTALL OPSCENTER AGENTS TO ALL CASSANDRA NODES
		# install libssl0.9.8 package
		puts ":::::::::::::::::: Installing libssl0.9.8"
		run "sudo apt-get install libssl0.9.8 -y"

		# install sysstat package
		puts ":::::::::::::::::: Installing sysstat"
		run "sudo apt-get install sysstat -y"
		
		# upload the agent.tar.gz created by OpsCenter to all Cassandara Nodes
		puts ":::::::::::::::::: Uploading the new created agent.tar.gz file to all nodes"
		upload("#{opscenter_path}/agent.tar.gz","#{temp_path}/agent.tar.gz")
		
		# create the Agent folder
		puts ":::::::::::::::::: Creating the agent folder"
		run "mkdir #{agent_path}"

		# untar the agent.tar.gz into the folder agent
		puts ":::::::::::::::::: Untaring the agent.tar.gz into the agent folder"
		run "tar -xzf #{temp_path}/agent.tar.gz --strip-components=1 -C #{agent_path}"

		# setup agent
		puts ":::::::::::::::::: Setting up agent for this Cassandra node"
		run "#{agent_path}/bin/./setup #{server[0]} $CAPISTRANO:HOST$"

	end



	# ====================================================================================== #
	# @author: lha
	# Start OpsCenter in KCSD Server and OpsCenter Agents in Cassandra Nodes
	# ====================================================================================== #
	desc 'Start OpsCenter on KCSD Server and OpsCenter Agent in Cassandra Nodes'
	task :start_opscenter, :roles => :peer do
	
		# start OpsCenter
		puts ":::::::::::::::::: Starting OpsCenter"
		#system "#{opscenter_path}/bin/./opscenter -f" # foreground
		system "#{opscenter_path}/bin/./opscenter" # background

		# run agent in foreground
		puts ":::::::::::::::::: Running Agent"
		#run "#{agent_path}/bin/./opscenter-agent -f" # foreground
		run "#{agent_path}/bin/./opscenter-agent" # background

	end



	# ====================================================================================== #
	# @author: lha
	# Stop OpsCenter in KCSD Server and OpsCenter Agens in Cassandra Nodes
	# ====================================================================================== #
	desc 'Stop OpsCenter in KCSD Server and OpsCenter Agents in Cassandra Nodes'
	task :stop_opscenter, :roles => :peer do
	
		# stop OpsCenter
		puts ":::::::::::::::::: Stopping OpsCenter"
		system "pkill -9 -f './bin/twistd'"

		# stop Agents
		puts ":::::::::::::::::: Stopping Agent"
		run "pkill -9 -f 'opscenter'" # background

	end

end
